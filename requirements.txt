# requirements.txt
pandas>=1.3.0
Pillow>=8.0.0
smtplib2>=0.2.0  # Enhanced SMTP support

# setup.py
from setuptools import setup, find_packages

with open("README.md", "r", encoding="utf-8") as fh:
    long_description = fh.read()

with open("requirements.txt", "r", encoding="utf-8") as fh:
    requirements = [line.strip() for line in fh if line.strip() and not line.startswith("#")]

setup(
    name="birthday-automation-system",
    version="2.0.0",
    author="Birthday Automation Team",
    author_email="admin@company.com",
    description="Automated birthday image generation and email system",
    long_description=long_description,
    long_description_content_type="text/markdown",
    url="https://github.com/company/birthday-automation",
    packages=find_packages(where="src"),
    package_dir={"": "src"},
    classifiers=[
        "Development Status :: 5 - Production/Stable",
        "Intended Audience :: Developers",
        "Topic :: Communications :: Email",
        "Topic :: Multimedia :: Graphics",
        "License :: OSI Approved :: MIT License",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
    ],
    python_requires=">=3.8",
    install_requires=requirements,
    extras_require={
        "dev": [
            "pytest>=6.0",
            "pytest-cov>=2.0",
            "black>=21.0",
            "flake8>=3.8",
            "mypy>=0.800",
        ],
        "test": [
            "pytest>=6.0",
            "pytest-mock>=3.0",
            "coverage>=5.0",
        ],
    },
    entry_points={
        "console_scripts": [
            "birthday-automation=main:main",
        ],
    },
    include_package_data=True,
    package_data={
        "": ["assets/*.png", "config/*.json"],
    },
    zip_safe=False,
)

# Makefile for development tasks
"""
.PHONY: install test clean lint format run

install:
	pip install -r requirements.txt
	pip install -e .[dev]

test:
	python -m pytest tests/ -v --cov=src --cov-report=html

test-quick:
	python tests/test_suite.py

clean:
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete
	rm -rf build/ dist/ *.egg-info/
	rm -rf htmlcov/ .coverage .pytest_cache/

lint:
	flake8 src tests
	mypy src

format:
	black src tests
	isort src tests

run:
	python main.py

run-tests:
	python tests/test_suite.py

setup-dev:
	python -c "from src.config.settings import create_default_config; create_default_config()"
	mkdir -p assets logs output_img
	echo "Development environment setup complete!"

docker-build:
	docker build -t birthday-automation .

docker-run:
	docker run -v $(PWD)/config:/app/config -v $(PWD)/employees.csv:/app/employees.csv birthday-automation

help:
	@echo "Available commands:"
	@echo "  install      Install dependencies"
	@echo "  test         Run full test suite with coverage"
	@echo "  test-quick   Run quick tests"
	@echo "  clean        Clean build artifacts"
	@echo "  lint         Run linting checks"
	@echo "  format       Format code"
	@echo "  run          Run the application"
	@echo "  setup-dev    Setup development environment"
	@echo "  docker-build Build Docker image"
	@echo "  docker-run   Run in Docker container"
"""

# Dockerfile
"""
FROM python:3.9-slim

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    fonts-dejavu-core \
    fonts-liberation \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Create necessary directories
RUN mkdir -p logs output_img assets config

# Set environment variables
ENV PYTHONPATH=/app/src
ENV LOG_LEVEL=INFO

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -c "from src.config.settings import Config; Config()" || exit 1

# Run the application
CMD ["python", "main.py"]
"""

# docker-compose.yml
"""
version: '3.8'

services:
  birthday-automation:
    build: .
    container_name: birthday-automation
    environment:
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - SMTP_SERVER=${SMTP_SERVER:-smtp.gmail.com}
      - SMTP_PORT=${SMTP_PORT:-587}
    volumes:
      - ./employees.csv:/app/employees.csv:ro
      - ./config:/app/config:ro
      - ./assets:/app/assets:ro
      - ./logs:/app/logs
      - ./output_img:/app/output_img
    restart: unless-stopped
    networks:
      - birthday-net

networks:
  birthday-net:
    driver: bridge
"""

# .env.example
"""
# Email Configuration
EMAIL_USER=your-email@company.com
EMAIL_PASSWORD=your-app-password

# SMTP Settings
SMTP_SERVER=smtp.gmail.com
SMTP_PORT=587

# Application Settings
LOG_LEVEL=INFO
LOG_FILE=logs/birthday_automation.log

# File Paths
CSV_FILE=employees.csv
OUTPUT_DIR=output_img
CUSTOM_BASE_IMAGE=

# Image Settings
IMAGE_WIDTH=800
IMAGE_HEIGHT=624
BACKGROUND_COLOR=#e40000
"""

# .gitignore
"""
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# Application specific
logs/
output_img/
visual_test_outputs/
config/config.json
employees.csv
*.png
*.jpg
*.jpeg

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db
"""

# pyproject.toml
"""
[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "birthday-automation-system"
dynamic = ["version"]
description = "Automated birthday image generation and email system"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Birthday Automation Team", email = "admin@company.com"},
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Topic :: Communications :: Email",
    "Topic :: Multimedia :: Graphics",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
requires-python = ">=3.8"
dependencies = [
    "pandas>=1.3.0",
    "Pillow>=8.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-cov>=2.0",
    "black>=21.0",
    "flake8>=3.8",
    "mypy>=0.800",
    "isort>=5.0",
]
test = [
    "pytest>=6.0",
    "pytest-mock>=3.0",
    "coverage>=5.0",
]

[project.scripts]
birthday-automation = "main:main"

[project.urls]
Homepage = "https://github.com/company/birthday-automation"
Repository = "https://github.com/company/birthday-automation.git"
Issues = "https://github.com/company/birthday-automation/issues"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools_scm]
write_to = "src/_version.py"

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
"""